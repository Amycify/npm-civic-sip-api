{"version":3,"sources":["../index.js"],"names":["stringify","require","uritemplate","apiGateway","crypto","jwtjs","sipClientFactory","JWT_EXPIRATION","newClient","config","jwtToken","body","authToken","authHeader","makeAuthorizationHeader","contentLength","Buffer","byteLength","JSON","additionalParams","headers","queryParams","params","scopeRequestAuthCodePostRequest","verb","toUpperCase","path","pathComponent","expand","core","utils","parseParametersToObject","apiGatewayClient","makeRequest","authType","apiKey","response","data","Error","message","exchangeCode","hostedServices","SIPHostedService","base_url","hexpub","tokenType","apigClient","undefined","appId","appSecret","env","defaultContentType","defaultAcceptType","invokeUrl","endpoint","exec","substring","length","sigV4ClientConfig","accessKey","secretKey","sessionToken","serviceName","region","simpleHttpClientConfig","apiGatewayClientFactory","targetPath","targetMethod","requestBody","createToken","method","extension","createCivicExt","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\n\n// require(\"babel-polyfill\");\n\nconst stringify = require('json-stringify');\nconst uritemplate = require('./lib/url-template/url-template');\nconst apiGateway = require('./lib/apiGatewayCore/apiGatewayClient');\nconst crypto = require('crypto');\nconst jwtjs = require('./lib/jwt');\n\nconst sipClientFactory = {};\n\nconst JWT_EXPIRATION = '3m';\n\nsipClientFactory.newClient = function (config) {\n\n  const hostedServices = {\n    SIPHostedService: {\n      base_url: 'https://api.civic.com/sip/',\n      hexpub: '044798c7940a6119583da4606e40f68df3ff449b2d583f0148e9ce6e09349a25ab68494e2bd10b8d5887d4fed438e8b03ba46f2a4b02e3841e7cf1ef3a70aeebf7',\n      tokenType: 'JWT'\n    },\n  }\n\n  const apigClient = { };\n  if(config === undefined) {\n      config = {\n          appId: '',\n          appSecret: '',  // in hex format\n          env: '',\n          defaultContentType: 'application/json',\n          defaultAcceptType: 'application/json'\n      };\n  }\n\n  if(!config.appId) {\n      throw new Error('Please supply your application ID.');\n  }\n\n  if(!config.appSecret) {\n    throw new Error('Please supply your application secret.');\n  }\n\n  // TODO: change default to prod once partner accounts and prod setup is in place.\n  if(!config.env) {\n    config.env = 'dev';\n  }\n  //If defaultContentType is not defined then default to application/json\n  if(config.defaultContentType === undefined) {\n      config.defaultContentType = 'application/json';\n  }\n  //If defaultAcceptType is not defined then default to application/json\n  if(config.defaultAcceptType === undefined) {\n      config.defaultAcceptType = 'application/json';\n  }\n\n  // extract endpoint and path from url\n  const invokeUrl = 'https://api.civic.com/sip/' + config.env;\n  const endpoint = /(^https?:\\/\\/[^\\/]+)/g.exec(invokeUrl)[1];\n  const pathComponent = invokeUrl.substring(endpoint.length);\n\n  const sigV4ClientConfig = {\n      accessKey: config.accessKey,\n      secretKey: config.secretKey,\n      sessionToken: config.sessionToken,\n      serviceName: 'execute-api',\n      region: config.region,\n      endpoint: endpoint,\n      defaultContentType: config.defaultContentType,\n      defaultAcceptType: config.defaultAcceptType\n  };\n\n  let authType = 'NONE';\n  if (sigV4ClientConfig.accessKey !== undefined && sigV4ClientConfig.accessKey !== '' && sigV4ClientConfig.secretKey !== undefined && sigV4ClientConfig.secretKey !== '') {\n      authType = 'AWS_IAM';\n  }\n\n  const simpleHttpClientConfig = {\n      endpoint: endpoint,\n      defaultContentType: config.defaultContentType,\n      defaultAcceptType: config.defaultAcceptType\n  };\n\n  const apiGatewayClient = apiGateway.core.apiGatewayClientFactory.newClient(simpleHttpClientConfig, sigV4ClientConfig);\n\n  /**\n   * Creates the authorization header as an extended Civic JWT Token.\n   * The token format: Civic requestToken.extToken\n   * where requestToken certifies the service path, method\n   * and audience, and extToken certifies the request body.\n   *\n   * The token is signed by the application secret.\n   *\n   * @param targetPath\n   * @param targetMethod\n   * @param requestBody\n   * @returns {string}\n   */\n  function makeAuthorizationHeader(targetPath, targetMethod, requestBody) {\n    const jwtToken = jwtjs.createToken(config.appId, hostedServices['SIPHostedService'].base_url, config.appId, JWT_EXPIRATION, {\n      method: targetMethod,\n      path: targetPath\n    }, config.appSecret);\n\n    const extension = jwtjs.createCivicExt(requestBody, config.appSecret);\n    return 'Civic' + ' ' + jwtToken + '.' + extension;\n  }\n\n  /**\n   * Exchange authorization code in the form of a JWT Token for the user data\n   * requested in the scope request.\n   *\n   * @param jwtToken containing the authorization code\n   *\n   */\n\n  async function exchangeCode(jwtToken) {\n    const body = { authToken: jwtToken };\n    const authHeader = makeAuthorizationHeader('scopeRequest/authCode', 'POST', body);\n    const contentLength = Buffer.byteLength(JSON.stringify(body));\n    const additionalParams = {\n      // If there are any unmodeled query parameters or headers that must be\n      //   sent with the request, add them here.\n      headers: {\n        'Content-Length': contentLength,\n        'Accept': '*/*',\n        'Authorization': authHeader,\n      },\n      queryParams: {\n      }\n    };\n    const params = {};\n\n    const scopeRequestAuthCodePostRequest = {\n        verb: 'post'.toUpperCase(),\n        path: pathComponent + uritemplate('/scopeRequest/authCode').expand(apiGateway.core.utils.parseParametersToObject(params, [])),\n        headers: apiGateway.core.utils.parseParametersToObject(params, []),\n        queryParams: apiGateway.core.utils.parseParametersToObject(params, []),\n        body: body\n    };\n\n    try {\n\n      const response = await apiGatewayClient.makeRequest(scopeRequestAuthCodePostRequest, authType, additionalParams, config.apiKey);\n      // console.log('response.data: ', JSON.stringify(response.data, null, 2));\n      return response.data;\n\n    } catch(error) {\n      throw new Error('Error exchanging code for data: ' + error.message);\n    }\n\n\n  };\n\n  apigClient.exchangeCode = exchangeCode;\n\n  return apigClient;\n};\n\nmodule.exports = sipClientFactory;"]}